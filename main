#-----------------librerias--------------------------------------------------------
# conjuno completo de controles de elementos UI para establecer una interfaz clásica de estilo de sistema
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QHeaderView  
from PyQt5.QtCore import QPropertyAnimation,QEasingCurve
from PyQt5 import QtCore, QtWidgets
from PyQt5.uic import loadUi
from matplotlib.pyplot import connect
from conexion_sqlite import Comunicacion                                  #se importa el programa conexion_sqlite y se manda a llamar a la clase Comunicacion

#creamos la clase VentanaPrincipal y se manda a llamar a la GUI QmainWindow
class VentanaPrincipal(QMainWindow):
    def __init__(self):
        super(VentanaPrincipal, self).__init__()
        loadUi("diseño.ui", self)

        self.bt_menu.clicked.connect(self.mover_menu)
        #clase comunicacion con sqlite
        self.basededatos = Comunicacion()

        #ocultar los botones
        self.bt_restaurar.hide()
        #botones
        self.bt_refrescar.clicked.connect(self.mostrar_usuario)
        self.bt_agregar.clicked.connect(self.registrar_usuario)
        self.bt_actualizar_tabla.clicked.connect(self.modificar_usuario)
        self.bt_actualizar_buscar.clicked.connect(self.buscar_por_nombre_actualizar)
        self.bt_buscar_borrar.clicked.connect(self.buscar_por_nombre_eliminar)
        self.bt_borrar.clicked.connect(self.eliminar_usuario)
        #botones barra de titulos

        self.bt_minimizar.clicked.connect(self.control_bt_minimizar)
        self.bt_restaurar.clicked.connect(self.control_bt_normal)
        self.bt_maximizar.clicked.connect(self.control_bt_maximizar)
        self.bt_cerrar.clicked.connect(lambda: self.close())

        #eliminar barra y de titulo
        self.setWindowFlag(QtCore.Qt.FramelessWindowHint)
        self.setWindowOpacity(1)

        #SizeGrip
        self.gripSize = 10
        self.grip =QtWidgets.QSizeGrip(self)
        self.grip.resize(self.gripSize, self.gripSize)

        #mover ventana
        self.frame_superior.mouseMoveEvent = self.mover_ventana

        #coneccion botones
        self.bt_datos.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.page_datos))
        self.bt_registrar.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.page_registrar))
        self.bt_actualizar.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.page_actualizar))
        self.bt_eliminar.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.page_eliminar))
        #ancho de columna adaptable
        self.tabla_usuario.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
       
    def control_bt_minimizar(self):
        self.showMinimized()

    def control_bt_normal(self):
        self.showNormal()
        self.bt_restaurar.hide()
        self.bt_maximizar.show()

    def control_bt_maximizar(self):
        self.showMaximized()
        self.bt_maximizar.hide()
        self.bt_restaurar.show()

    #sizeGrip
    def resizeEvent(self, event):
        rect = self.rect()
        self.grip.move(rect.right() - self.gripSize, rect.bottom() - self.gripSize) 

    #mover ventana
    def mousePressEvent(self,event):
        self.click_position = event.globalPos()
    
    def mover_ventana(self, event):
        if self.isMaximized() == False:
            if event.buttons() == QtCore.Qt.LeftButton:
                self.move(self.pos() + event.globalPos() - self.click_position)
                self.click_position = event.globalPos()
                event.accept()
        if event.globalPos().y() <= 10:
            self.showMaximized()
            self.bt_maximizar.hide()
            self.bt_restaurar.show()
        else:
            self.showNormal()
            self.bt_restaurar.hide()
            self.bt_maximizar.show()

#Metodo para mover el menu lateral iaquierdo
    def mover_menu(self):
        if True:
            width = self.frame_control.width()
            normal = 0
            if width== 0:
                extender = 200
            else:
                extender = normal
            self.animacion = QPropertyAnimation(self.frame_control, b'minimumWidth')
            self.animacion.setDuration(300)
            self.animacion.setStartValue(width)
            self.animacion.setEndValue(extender)
            self.animacion.setEasingCurve(QtCore.QEasingCurve.InOutQuart)
            self.animacion.start()
#sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss            
    #Configurar base de datos
    def mostrar_usuario(self):
        datos =  self.basededatos.mostrar_usuario()
        i = len(datos)
        self.tabla_usuario.setRowCount(i)
        tablerow = 0
        for row in datos:
            self.Id = row[0]
            self.tabla_usuario.setItem(tablerow,0,QtWidgets.QTableWidgetItem(row[1]))
            self.tabla_usuario.setItem(tablerow,1,QtWidgets.QTableWidgetItem(row[2]))
            self.tabla_usuario.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[3]))
            self.tabla_usuario.setItem(tablerow,3,QtWidgets.QTableWidgetItem(row[4]))
            self.tabla_usuario.setItem(tablerow,4,QtWidgets.QTableWidgetItem(row[5]))
            tablerow  +=1
            self.signal_actualizar.setText("")
            self.signal_registrar.setText("")

    def registrar_usuario(self):
        codigo = self.reg_codigo.text().upper()
        nombre = self.reg_nombre.text().upper()
        edad = self.reg_edad.text().upper()
        puesto = self.reg_puesto.text().upper()
        numseguro = self.reg_numseguro.text().upper()
        if codigo != '' and nombre != '' and edad != '' and puesto != '' and numseguro !='':
            self.basededatos.inserta_usuario(codigo, nombre, edad, puesto, numseguro)
            self.signal_registrar.setText('Usuario Registrado')
            self.reg_codigo.clear()
            self.reg_nombre.clear()
            self.reg_edad.clear()
            self.reg_puesto.clear()
            self.reg_numseguro.clear()
        else:
            self.signal_registrar.setText('hay espacios vacios')

    def buscar_por_nombre_actualizar(self):
        id_usuario = self.act_buscar.text().upper()
        id_usuario = str("'" + id_usuario + "'")
        self.usuario = self.basededatos.busca_usuario(id_usuario)
        if len(self.usuario) !=0:
            self.Id = self.usuario[0][0]
            self.act_codigo.setText(self.usuario[0][1])
            self.act_nombre.setText(self.usuario[0][2])
            self.act_edad.setText(self.usuario[0][3])
            self.act_puesto.setText(self.usuario[0][4])
            self.act_numseguro.setText(self.usuario[0][5])
        else:
            self.signal_actualizar.setText("NO EXISTE")

    def modificar_usuario(self):
        if self.usuario !='':
            codigo = self.act_codigo.text().upper()
            nombre = self.act_nombre.text().upper()
            edad = self.act_edad.text().upper()
            puesto = self.act_puesto.text().upper()
            numseguro = self.act_numseguro.text().upper()
            act = self.basededatos.actualiza_usuario(self.Id,codigo, nombre, edad, puesto, numseguro)
            if act ==1:
                self.signal_actualizar.setText("USUARIO ACTUALIZADO")
                self.act_codigo.clear()
                self.act_nombre.clear()
                self.act_edad.clear()
                self.act_puesto.clear()
                self.act_numseguro.clear()
                self.act_buscar.setText('')
            elif act ==0:
                self.signal_actualizar.setText("ERROR")
            else:
                self.signal_actualizar.setText("INCORRECTO")

    def buscar_por_nombre_eliminar(self):
        nombre_usuario = self.eliminar_buscar.text().upper()
        nombre_usuario = str("'" + nombre_usuario + "'")
        usuario = self.basededatos.busca_usuario(nombre_usuario)
        self.tabla_borrar.setRowCount(len(usuario))

        if len(usuario) == 0:
            self.signal_eliminar.setText('No existe')
        else:
            self.signal_eliminar.setText('Usuario seleccionado')
        tablerow = 0
        for row in usuario:
            self.usuario_a_borrar = row [2]
            self.tabla_borrar.setItem(tablerow,0,QtWidgets.QTableWidgetItem(row[1]))
            self.tabla_borrar.setItem(tablerow,1,QtWidgets.QTableWidgetItem(row[2]))
            self.tabla_borrar.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[3]))
            self.tabla_borrar.setItem(tablerow,3,QtWidgets.QTableWidgetItem(row[4]))
            self.tabla_borrar.setItem(tablerow,4,QtWidgets.QTableWidgetItem(row[5]))

    def eliminar_usuario(self):
        self.row_flag = self.tabla_borrar.currentRow()
        if self.row_flag == 0:
            self.tabla_borrar.removeRow(0)
            self.basededatos.elimina_usuario("'" + self.usuario_a_borrar + "'")
            self.signal_eliminar.setText("Usuario eliminado")
            self.eliminar_buscar.setText('')
    

if __name__ == "__main__":
    app = QApplication(sys.argv)
    mi_app = VentanaPrincipal()
    mi_app.show()
    sys.exit(app.exec_())
